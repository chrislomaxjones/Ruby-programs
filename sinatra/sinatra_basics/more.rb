require 'sinatra'

# Filters
#--------

# Before filters are evaluated before each request within 
# the same context as the routes will be and can modify 
# the request and response. Instance vars set in filters
# are accesible by routes and templates:
before do
	@note = "Hi!"
	#request.path_info = '/foo/bar/baz'
end

get '/foo/*' do
	@note #=> Hi!
	params[:splat] #=> 'bar/baz'
end

# After filters are evaluated after each request within the 
# same context as the routes will be and can also modify the 
# request and response. Instance vars set in before filters
# and routes are accessible by after filters:
after do
	#puts response.status
end

# Filters optionally take a pattern, causing them to be evaluated
# only if the request path matches the pattern
before '/protected/*' do
	#authenticate!
end

after '/create/:slug' do |slug|
	session[:last_slug] = slug
end

# Helpers
#--------

# Use the top-level helpers method to define methods for use in 
# route handlers and templates
helpers do
	def bar(name)
		"#{name} bar"
	end
end

get '/:name' do
	bar(params[:name])
end

# Alternatively, helper methods can be separately defined in a module
module FooUtils
	def foo(name)
		"#{name} foo" 
	end
end

module BarUtils
	def bar(name)
		"#{name} bar"
	end
end

helpers FooUtils, BarUtils

# Using Sessions
#---------------

# A session is used to keep state during requests.
# If activated, you have on session hash per user per session
enable :sessions

get '/sesh' do
	"tits"
	#"value = " << session[:value].inspect
end

get '/sesh/:value' do
	session[:value] = params[:value]
end

# Session data in the cookie is signed with a session secret
# A random secret is generated by sinatra
# You can set it yourself
set :session_secret, 'super secret'

# Halting
#---------

# To stop a request within a filter or route use halt method
get '/halt' do
	halt
end

# You can specify a status when halting
get '/halt410' do
	halt 410
end

# Or the body
get '/haltbody' do
	halt 'this will be the body'
end

# Or both
get '/haltboth' do
	halt 401, 'go away!'
end


















